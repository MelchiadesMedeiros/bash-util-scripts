#!/usr/bin/env bash
#-----------------------------
# applauch (2020) fszostak
# Fri Apr 10 19:18:45 -03 2020

CHROME="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"
FIREFOX="/Applications/Firefox.app/Contents/MacOS/firefox"
SAFARI="/Applications/Safari.app/Contents/MacOS/Safari"

. ~/scripts/.app-functions.sh

if [ "$1" = "-h" -o ! -f ~/.applaunchrc ]; then
  cat <<EOF

usage: $(basename $0) [-g] [<app_name>]

       <app_name>       [optional] app name to start
       -g <group_name>  [optional] group name to start

       Create your ~/.applaunchrc

       Format:
       app_name | description;group;url;width,height;positionX,positionY;

       Example ~/.applaunchrc:
       google   | Google           ;;https://www.google.com;800,600;100,100
       twitter  | Twitter          ;social;https://www.twitter.com;
       facebook | Facebook         ;social;https://www.facebook.com;
       mozilla  | Mozila           ;;https://www.mozilla.org;

       Execute:
       $(basename $0) google
       or
       $(basename $0) -g social
       or
       $(basename $0)

EOF
  exit
fi

if [ "$1" = "-g" ]; then
  APPGROUP=$1
  shift
else
  APPGROUP=''
fi

FILTER=$1

if [ "$FILTER" = "" ]; then
  echo
  msg_bold "  applaunch (2020) by fszostak"
  echo
  echo "  Select one app using up/down"
  echo "  keys and enter or return to confirm:"

  IFS=$'\n'

  options=( $(cat ~/.applaunchrc | grep -v -e "^$" | grep -v -e "ˆ# "| cut -f1 -d";" | sort -t '|' -k2 | uniq))
  echo

  select_option "${options[@]}"
  let choice=$?

  if [ $choice -eq 0 ]; then
      echo
      break
  fi

  APP=$(echo ${options[$choice]} | awk '{print $1}')
else
  APP=$FILTER
fi

if [ "$APPGROUP" = "" ]; then
  if [ $(grep -e "$APP" ~/.applaunchrc | wc -l) -eq 0 ]; then
    echo "App \"$APP\" not found in ~/.applaunchrc"
    exit
  fi
else
  if [ $(grep -e ";$APP;" ~/.applaunchrc | wc -l) -eq 0 ]; then
    echo "Group \"$APP\" not found in ~/.applaunchrc"
    exit
  fi
fi
while read APP_DATA
do
  IFS=";"
  set - $APP_DATA

  THIS_APP=$(echo "$FILTER" | cut -f1 -d' ')
  APP_GROUP=$2
  URL=$3
  SIZE=$4
  POSITION=$5

  APP_TYPE=$(echo "$URL" | cut -f1 -d":")

  # Chrome launch
  if [ "$APP_TYPE" == "http" -o "$APP_TYPE" == "https" -o "$APP_TYPE" == "file" ]; then
    if [ $(ps aux | grep "$URL" | grep -v grep | wc -l) -gt 0 ]; then
      if [ "$SIZE" != "" ]; then
        kill -9 $(ps aux | grep "$URL" | grep -v grep | awk '{print $2}')
        [ $? -eq 0 ] && echo "$THIS_APP - $URL browser was killed!!!"
      else
        echo "$THIS_APP - $URL already running!!!"
        continue
      fi
    fi

    echo "Starting $THIS_APP - $URL ..."

    if [ "$SIZE" != "" ]; then
      WIDTH=$(echo $SIZE | cut -f1 -d',')
      HEIGHT=$(echo $SIZE | cut -f2 -d',')
      POSX=$(echo $POSITION | cut -f1 -d',')
      POSY=$(echo $POSITION | cut -f2 -d',')
    else
      WIDTH=800
      HEIGHT=600
      POSX=50
      POSY=50
    fi

    if [ "$SIZE" != "" ]; then
       APP_PARM="data:text/html,<html><body><script>window.moveTo($POSITION);window.resizeTo($SIZE);window.location='$URL';</script></body></html>" 
       $CHROME –ignore-certificate-errors --app="$APP_PARM" > /dev/null 2>&1 &
    else
       $CHROME –ignore-certificate-errors --app="$URL" > /dev/null 2>&1 &
    fi
  fi

  # bash command launch
  if [ "$APP_TYPE" == "bash" ]; then
    CMD=$(echo "$URL" | cut -f2 -d":")
    echo "Starting $THIS_APP ..."
    echo "\$ $CMD"
    bash -c "$CMD"
  fi
  
done <<EOF
$(grep -e "$APP " ~/.applaunchrc)
$(grep -e ";$APP;" ~/.applaunchrc)
EOF
